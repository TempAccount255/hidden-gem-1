// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: okhttp3.MediaType
///
/// An <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a> Media Type, appropriate to describe
/// the content type of an HTTP request or response body.
class MediaType extends jni.JObject {
  @override
  late final jni.JObjType<MediaType> $type = type;

  MediaType.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"okhttp3/MediaType");

  /// The type which includes information such as the signature of this class.
  static const type = $MediaTypeType();
  static final _id_get0 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"get", r"(Ljava/lang/String;)Lokhttp3/MediaType;");

  /// from: static public okhttp3.MediaType get(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns a media type for {@code string}.
  ///@throws IllegalArgumentException if {@code string} is not a well-formed media type.
  static MediaType get0(
    jni.JString string,
  ) {
    return const $MediaTypeType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_get0,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_parse = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"parse", r"(Ljava/lang/String;)Lokhttp3/MediaType;");

  /// from: static public okhttp3.MediaType parse(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns a media type for {@code string}, or null if {@code string} is not a well-formed media
  /// type.
  static MediaType parse(
    jni.JString string,
  ) {
    return const $MediaTypeType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_parse,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_type0 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"type", r"()Ljava/lang/String;");

  /// from: public java.lang.String type()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the high-level media type, such as "text", "image", "audio", "video", or
  /// "application".
  jni.JString type0() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_type0, jni.JniCallType.objectType, []).object);
  }

  static final _id_subtype = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"subtype", r"()Ljava/lang/String;");

  /// from: public java.lang.String subtype()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns a specific media subtype, such as "plain" or "png", "mpeg", "mp4" or "xml".
  jni.JString subtype() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_subtype, jni.JniCallType.objectType, []).object);
  }

  static final _id_charset = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"charset", r"()Ljava/nio/charset/Charset;");

  /// from: public java.nio.charset.Charset charset()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the charset of this media type, or null if this media type doesn't specify a charset.
  jni.JObject charset() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_charset, jni.JniCallType.objectType, []).object);
  }

  static final _id_charset1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"charset", r"(Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;");

  /// from: public java.nio.charset.Charset charset(java.nio.charset.Charset defaultValue)
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the charset of this media type, or {@code defaultValue} if either this media type
  /// doesn't specify a charset, of it its charset is unsupported by the current runtime.
  jni.JObject charset1(
    jni.JObject defaultValue,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_charset1,
        jni.JniCallType.objectType,
        [defaultValue.reference]).object);
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the encoded media type, like "text/plain; charset=utf-8", appropriate for use in a
  /// Content-Type header.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }

  static final _id_equals1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object other)
  bool equals1(
    jni.JObject other,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_equals1,
        jni.JniCallType.booleanType, [other.reference]).boolean;
  }

  static final _id_hashCode1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hashCode", r"()I");

  /// from: public int hashCode()
  int hashCode1() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hashCode1, jni.JniCallType.intType, []).integer;
  }
}

final class $MediaTypeType extends jni.JObjType<MediaType> {
  const $MediaTypeType();

  @override
  String get signature => r"Lokhttp3/MediaType;";

  @override
  MediaType fromRef(jni.JObjectPtr ref) => MediaType.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MediaTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MediaTypeType) && other is $MediaTypeType;
  }
}
