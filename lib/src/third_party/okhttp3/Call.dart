// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Request.dart" as request_;

import "Response.dart" as response_;

/// from: okhttp3.Call
///
/// A call is a request that has been prepared for execution. A call can be canceled. As this object
/// represents a single request/response pair (stream), it cannot be executed twice.
class Call extends jni.JObject {
  @override
  late final jni.JObjType<Call> $type = type;

  Call.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"okhttp3/Call");

  /// The type which includes information such as the signature of this class.
  static const type = $CallType();
  static final _id_request = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"request", r"()Lokhttp3/Request;");

  /// from: public abstract okhttp3.Request request()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns the original request that initiated this call.
  request_.Request request() {
    return const request_.$RequestType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_request, jni.JniCallType.objectType, []).object);
  }

  static final _id_execute = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"execute", r"()Lokhttp3/Response;");

  /// from: public abstract okhttp3.Response execute()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Invokes the request immediately, and blocks until the response can be processed or is in
  /// error.
  ///
  /// To avoid leaking resources callers should close the Response which in turn will
  /// close the underlying ResponseBody.
  ///
  /// <pre>{@code
  ///
  ///   // ensure the response (and underlying response body) is closed
  ///   try (Response response = client.newCall(request).execute()) {
  ///     ...
  ///   }
  ///
  /// }</pre>
  ///
  /// The caller may read the response body with the response's Response\#body method. To
  /// avoid leaking resources callers must {@linkplain ResponseBody close the response body} or the
  /// Response.
  ///
  /// Note that transport-layer success (receiving a HTTP response code, headers and body) does
  /// not necessarily indicate application-layer success: {@code response} may still indicate an
  /// unhappy HTTP response code like 404 or 500.
  ///@throws IOException if the request could not be executed due to cancellation, a connectivity
  /// problem or timeout. Because networks can fail during an exchange, it is possible that the
  /// remote server accepted the request before the failure.
  ///@throws IllegalStateException when the call has already been executed.
  response_.Response execute() {
    return const response_.$ResponseType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_execute, jni.JniCallType.objectType, []).object);
  }

  static final _id_enqueue = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enqueue", r"(Lokhttp3/Callback;)V");

  /// from: public abstract void enqueue(okhttp3.Callback responseCallback)
  ///
  /// Schedules the request to be executed at some point in the future.
  ///
  /// The OkHttpClient\#dispatcher dispatcher defines when the request will run: usually
  /// immediately unless there are several other requests currently being executed.
  ///
  /// This client will later call back {@code responseCallback} with either an HTTP response or a
  /// failure exception.
  ///@throws IllegalStateException when the call has already been executed.
  void enqueue(
    jni.JObject responseCallback,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_enqueue,
        jni.JniCallType.voidType, [responseCallback.reference]).check();
  }

  static final _id_cancel =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"cancel", r"()V");

  /// from: public abstract void cancel()
  ///
  /// Cancels the request, if possible. Requests that are already complete cannot be canceled.
  void cancel() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_cancel, jni.JniCallType.voidType, []).check();
  }

  static final _id_isExecuted =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isExecuted", r"()Z");

  /// from: public abstract boolean isExecuted()
  ///
  /// Returns true if this call has been either {@linkplain \#execute() executed} or {@linkplain \#enqueue(Callback) enqueued}. It is an error to execute a call more than once.
  bool isExecuted() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isExecuted, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isCanceled =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isCanceled", r"()Z");

  /// from: public abstract boolean isCanceled()
  bool isCanceled() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isCanceled, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_timeout = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"timeout", r"()Lokio/Timeout;");

  /// from: public abstract okio.Timeout timeout()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Returns a timeout that spans the entire call: resolving DNS, connecting, writing the request
  /// body, server processing, and reading the response body. If the call requires redirects or
  /// retries all must complete within one timeout period.
  ///
  /// Configure the client's default timeout with OkHttpClient.Builder\#callTimeout.
  jni.JObject timeout() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_timeout, jni.JniCallType.objectType, []).object);
  }

  static final _id_clone = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clone", r"()Lokhttp3/Call;");

  /// from: public abstract okhttp3.Call clone()
  /// The returned object must be released after use, by calling the [release] method.
  ///
  /// Create a new, identical call to this one which can be enqueued or executed even if this call
  /// has already been.
  Call clone() {
    return const $CallType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clone, jni.JniCallType.objectType, []).object);
  }
}

final class $CallType extends jni.JObjType<Call> {
  const $CallType();

  @override
  String get signature => r"Lokhttp3/Call;";

  @override
  Call fromRef(jni.JObjectPtr ref) => Call.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CallType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CallType) && other is $CallType;
  }
}

/// from: okhttp3.Call$Factory
class Call_Factory extends jni.JObject {
  @override
  late final jni.JObjType<Call_Factory> $type = type;

  Call_Factory.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"okhttp3/Call$Factory");

  /// The type which includes information such as the signature of this class.
  static const type = $Call_FactoryType();
  static final _id_newCall = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"newCall", r"(Lokhttp3/Request;)Lokhttp3/Call;");

  /// from: public abstract okhttp3.Call newCall(okhttp3.Request request)
  /// The returned object must be released after use, by calling the [release] method.
  Call newCall(
    request_.Request request,
  ) {
    return const $CallType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_newCall,
        jni.JniCallType.objectType,
        [request.reference]).object);
  }
}

final class $Call_FactoryType extends jni.JObjType<Call_Factory> {
  const $Call_FactoryType();

  @override
  String get signature => r"Lokhttp3/Call$Factory;";

  @override
  Call_Factory fromRef(jni.JObjectPtr ref) => Call_Factory.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Call_FactoryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Call_FactoryType) &&
        other is $Call_FactoryType;
  }
}
